# Test Cases for Big-O Notation Estimator

## Introduction
This document provides a set of test cases to validate the accuracy of the Big-O Notation Estimator. Each test case includes a JavaScript function, the expected Big-O complexity, and an explanation.

---

## **1. Constant Time Complexity: O(1)**

### **Test Case**
```javascript
function getFirstElement(arr) {
    return arr[0];
}
```
### **Expected Output**
✅ `O(1) - Constant time`

### **Explanation**
- The function directly accesses an array element.
- Execution time remains constant regardless of input size.

---

## **2. Linear Time Complexity: O(n)**

### **Test Case**
```javascript
function printElements(arr) {
    for (let i = 0; i < arr.length; i++) {
        console.log(arr[i]);
    }
}
```
### **Expected Output**
✅ `O(n) - Linear time`

### **Explanation**
- The loop runs **n** times, where **n** is `arr.length`.
- Execution time scales proportionally with input size.

---

## **3. Quadratic Time Complexity: O(n²)**

### **Test Case**
```javascript
function printPairs(arr) {
    for (let i = 0; i < arr.length; i++) {
        for (let j = 0; j < arr.length; j++) {
            console.log(arr[i], arr[j]);
        }
    }
}
```
### **Expected Output**
✅ `O(n²) - Quadratic time`

### **Explanation**
- A **nested loop** runs **n²** times.
- Execution time grows exponentially as input increases.

---

## **4. Cubic Time Complexity: O(n³)**

### **Test Case**
```javascript
function printTriplets(arr) {
    for (let i = 0; i < arr.length; i++) {
        for (let j = 0; j < arr.length; j++) {
            for (let k = 0; k < arr.length; k++) {
                console.log(arr[i], arr[j], arr[k]);
            }
        }
    }
}
```
### **Expected Output**
✅ `O(n³) - Higher order polynomial time`

### **Explanation**
- Three nested loops result in **O(n³)** complexity.
- Execution time increases dramatically with larger inputs.

---

## **5. Logarithmic Time Complexity: O(log n)**

### **Test Case**
```javascript
function binarySearch(arr, target) {
    let left = 0, right = arr.length - 1;
    while (left <= right) {
        let mid = Math.floor((left + right) / 2);
        if (arr[mid] === target) return mid;
        else if (arr[mid] < target) left = mid + 1;
        else right = mid - 1;
    }
    return -1;
}
```
### **Expected Output**
✅ `O(log n) - Logarithmic time`

### **Explanation**
- Each iteration **halves** the search space.
- Execution time grows slowly even for large inputs.

---

## **6. Exponential Time Complexity: O(2ⁿ)**

### **Test Case**
```javascript
function fibonacci(n) {
    if (n <= 1) return n;
    return fibonacci(n - 1) + fibonacci(n - 2);
}
```
### **Expected Output**
✅ `O(2ⁿ) - Recursion detected`

### **Explanation**
- The function calls itself **twice** per recursion step.
- Execution time doubles with each increase in input size.

---

## **7. Factorial Time Complexity: O(n!)**

### **Test Case**
```javascript
function permute(arr, l, r) {
    if (l === r) console.log(arr);
    else {
        for (let i = l; i <= r; i++) {
            [arr[l], arr[i]] = [arr[i], arr[l]]; // Swap
            permute(arr, l + 1, r);
            [arr[l], arr[i]] = [arr[i], arr[l]]; // Backtrack
        }
    }
}
```
### **Expected Output**
✅ `O(n!) - Recursion detected`

### **Explanation**
- The function generates **all permutations** of an array.
- Execution time grows as **n!**.

---

## **How to Test**
1. Copy-paste the test case into the text area of your Big-O Notation Estimator.
2. Click on **"Analyze Complexity"**.
3. Compare the output with the expected result.

---

## **Conclusion**
    These test cases will help validate the accuracy of the Big-O Notation Estimator.
